(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{473:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"volatile-详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#volatile-详解"}},[t._v("#")]),t._v(" volatile 详解")]),t._v(" "),s("h2",{attrs:{id:"_1、volatile-关键字的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、volatile-关键字的作用"}},[t._v("#")]),t._v(" 1、volatile 关键字的作用")]),t._v(" "),s("p",[t._v("保证变量的可见性和有序性。  那原子性呢？最后再说")]),t._v(" "),s("h2",{attrs:{id:"_2、volatile-关键字保证可见性的原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、volatile-关键字保证可见性的原理"}},[t._v("#")]),t._v(" 2、volatile 关键字保证可见性的原理")]),t._v(" "),s("p",[t._v("依赖处理器的"),s("code",[t._v("lock")]),t._v("前缀指令和处理器的缓存一致性协议。")]),t._v(" "),s("h3",{attrs:{id:"先看个可见性问题的例子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#先看个可见性问题的例子"}},[t._v("#")]),t._v(" 先看个可见性问题的例子：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token import"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("concurrent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TestA")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" flag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SECONDS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            flag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"循环了"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"次"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("运行结果："),s("br"),t._v("\n会出现死循环。"),s("br"),t._v("\n因为共享变量"),s("code",[t._v("flag")]),t._v("没有使用 "),s("code",[t._v("volatile")]),t._v("关键字修饰，所以没办法保证"),s("code",[t._v("flag")]),t._v("变量的可见性，main线程可能无法读取到t线程对"),s("code",[t._v("flag")]),t._v("共享变量的最新修改结果,导致死循环。"),s("br"),t._v("\n如果我们使用 "),s("code",[t._v("volatile")]),t._v("关键字修饰"),s("code",[t._v("flag")]),t._v("变量，则程序可以正常结束循环，并打印出循环次数。")]),t._v(" "),s("h3",{attrs:{id:"从程序运行结果分析volatile的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从程序运行结果分析volatile的作用"}},[t._v("#")]),t._v(" 从程序运行结果分析volatile的作用：")]),t._v(" "),s("p",[t._v("我们可以这么理解，当一个变量被"),s("code",[t._v("volatile")]),t._v("关键字修饰后，一个线程修改了自己工作内存中的该共享变量后，会立即被更新到主内存中，\n同时其他线程的工作内存存储的该变量副本变为失效状态，当其他线程再次读取或者修改该共享变量时，会直接从主内存中读取最新的值。")]),t._v(" "),s("h3",{attrs:{id:"从底层实现分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从底层实现分析"}},[t._v("#")]),t._v(" 从底层实现分析：")]),t._v(" "),s("p",[t._v("下面会涉及处理器的一些简单知识点，有这些作为铺垫更方便理解"),s("code",[t._v("volatile")]),t._v("的底层原理。")]),t._v(" "),s("h3",{attrs:{id:"先思考在处理器-cpu-层面实现变量的可见性-有哪些方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#先思考在处理器-cpu-层面实现变量的可见性-有哪些方式"}},[t._v("#")]),t._v(" 先思考在处理器(CPU)层面实现变量的可见性，有哪些方式？")]),t._v(" "),s("p",[t._v("主要有下面几种方式：")]),t._v(" "),s("h3",{attrs:{id:"_1、缓存一致性协议-mesi"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、缓存一致性协议-mesi"}},[t._v("#")]),t._v(" ①、缓存一致性协议(MESI)")]),t._v(" "),s("p",[t._v("我们电脑上的处理器大都是多核处理器，可以使用缓存一致性协议（如 MESI 协议）来确保多个处理器核心的缓存数据一致。通过缓存行状态的管理和消息传递机制，确保一个核心对共享变量的更新可以被其他核心及时看到。")]),t._v(" "),s("p",[s("strong",[t._v("介绍下缓存行")]),s("br"),t._v("\n缓存行（Cache Line）是 CPU 缓存中的一个基本单位，用于存储从主内存加载的数据块。缓存行的大小通常为 32 字节、64 字节或 128 字节，这取决于具体的处理器架构(大多数现代 x86-64 架构处理器，如 Intel 和 AMD 的大部分64位处理器，都使用 64 字节的缓存行大小)。")]),t._v(" "),s("p",[t._v("当 CPU 需要访问内存中的某个数据时，它会将包含该数据的整个缓存行加载到缓存中。缓存行不仅包含目标数据，还包含其周围的一些数据。这种批量加载的方式有助于提高缓存命中率，因为程序中的数据访问通常具有局部性，即连续的内存地址更有可能被连续访问。")]),t._v(" "),s("p",[t._v("在多核处理器中，每个核心都有自己的 L1 和 L2 缓存，并共享一个 L3 缓存。缓存一致性协议确保多个核心之间的数据一致性。例如，当一个核心修改了某个缓存行的数据时，协议会确保其他核心中相应的缓存行无效，以便它们下次访问时从主内存或共享缓存中获取最新的数据。(这就能和上面说的"),s("code",[t._v("同时其他线程的工作内存存储的该变量副本变为失效状态")]),t._v("对应起来)")]),t._v(" "),s("p",[s("strong",[t._v("L1、L2、L3三级缓存设计的作用？")]),t._v("\nL1缓存是最接近CPU核心的，具有最快的访问速度，但容量相对较小。L2缓存位于L1缓存之外，容量更大，访问速度略慢于L1，但仍比主内存快得多。L1和L2缓存都是每个核心私有的，这意味着它们只服务于其对应的核心。"),s("br"),t._v("\nL3（三级）缓存则是共享的，所有核心都可以访问。L3缓存的容量比L1和L2都要大，但访问速度慢于这两者。L3缓存的存在是为了进一步减少主内存访问的需求，并充当不同核心之间的数据共享区域，特别是在多线程或多任务环境中，当多个核心可能需要访问相同数据集的情况。")]),t._v(" "),s("p",[s("strong",[t._v("再介绍下MESI 协议")]),t._v("\nMESI 协议是最常见的缓存一致性协议之一，包含四种缓存行状态："),s("br"),t._v("\nModified（修改态）：缓存行的数据已被修改，且该数据只存在于当前缓存中，其他缓存中没有该数据。\nExclusive（独占态）：缓存行的数据是最新的，但还没有被修改，且该数据只存在于当前缓存中。\nShared（共享态）：缓存行的数据没有被修改，可以存在于多个缓存中。\nInvalid（无效态）：缓存行的数据无效。\n当一个核心写入一个缓存行时，会将其他核心中相同的缓存行状态设为无效（Invalid）。这样，其他核心在访问该数据时必须从主内存中重新读取最新的数据。")]),t._v(" "),s("h3",{attrs:{id:"_2、cpu内存屏障指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、cpu内存屏障指令"}},[t._v("#")]),t._v(" ②、CPU内存屏障指令")]),t._v(" "),s("p",[t._v("先理解下Store和Load，可以把Store认为是保存或者写的含义，把Load认为是加载或者读的含义。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("内存屏障类型名称")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("指令名称")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("描述")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("示例")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("读屏障")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("lfence")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Load Fence，防止读操作的重排序。确保在它之后的所有读操作都在它之前的读操作完成后执行。")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("在读取敏感数据前，确保所有先前的读操作已完成。")])]),t._v(" "),s("tr",[s("td",[t._v("写屏障")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("sfence")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Store Fence，确保所有先前的写操作都已在它之前完成，并且不会被重新排序到该指令之后。")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("在关键数据写入后，确保所有先前的写操作已完成并反映在内存中。")])]),t._v(" "),s("tr",[s("td",[t._v("全屏障")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("mfence")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Memory Fence，防止读/写的重排序。确保在它之后的所有读/写操作都在它之前的读/写操作完成后执行。")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("在并发操作中，确保所有内存在它之前的操作按顺序执行，常用于多线程同步。")])])])]),t._v(" "),s("p",[t._v("在 Java 中，"),s("code",[t._v("volatile")]),t._v(" 关键字会在读和写操作前后插入相应的内存屏障(JVM层面实现和上面三个指令没啥关系)，以确保内存操作的顺序和可见性(稍后会再详细分析)。")]),t._v(" "),s("h3",{attrs:{id:"_3、带lock-前缀的指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、带lock-前缀的指令"}},[t._v("#")]),t._v(" ③、带lock 前缀的指令")]),t._v(" "),s("p",[t._v("处理器提供的 lock 前缀可以用于一些指令(比如 add)，确保这些指令在多处理器系统中的原子性和可见性。")]),t._v(" "),s("p",[t._v("我们在JIT编译器编译后的汇编代码中可以找到这种带 lock 前缀的指令。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://chriswhocodes.com/hsdis/",target:"_blank",rel:"noopener noreferrer"}},[t._v("先下载hsdis工具，下载地址。https://chriswhocodes.com/hsdis/"),s("OutboundLink")],1),s("br"),t._v("\n我是Window 64位系统就下载 红框里这个")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/images/31-1.png"),alt:"mixureSecure"}}),t._v(" "),s("p",[t._v("IDEA中添加下面的JVM启动参数："),s("br"),t._v("\n参数如下")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-server")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-XX:+UnlockDiagnosticVMOptions")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-XX:+PrintAssembly")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-XX:+LogCompilation")]),t._v("\n")])])]),s("p",[t._v("运行代码(注意Java代码中变量flag加了volatile)， 在IDEA的日志打印界面看到，JVM打印出由即时编译器（JIT Compiler）生成的本地机器码（assembly code）。我运行Java程序的机器是64位Windows系统，所以这里生成的本地机器码是指 x86-64架构下的汇编代码。")]),t._v(" "),s("p",[s("strong",[t._v("补充小知识点：")]),t._v(" "),s("strong",[t._v("x86:")]),t._v("\nx86 是一系列基于英特尔架构（Intel Architecture，IA）的计算机芯片指令集架构的总称，最初由英特尔公司在 1978 年推出的 16 位微处理器 8086 开始。")]),t._v(" "),s("p",[s("strong",[t._v("x86-64:")]),t._v("\nx86-64，也称为 AMD64 或 x64，是一种由 AMD 设计的 64 位微处理器架构。")]),t._v(" "),s("p",[t._v("下图是利用 hsdis工具，配合JVM启动命令来打印的JIT编译器编译后的本地机器码（assembly code）。")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/images/31-2.png"),alt:"mixureSecure"}}),t._v(" "),s("p",[t._v("可以看到这里面就有用到lock前缀的汇编指令。"),s("br"),t._v("\n这里先对 "),s("code",[t._v("lock addl $0x0,(%rsp)")]),t._v("留个印象，后面会讲到这个指令。")]),t._v(" "),s("h3",{attrs:{id:"_4、总线锁定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、总线锁定"}},[t._v("#")]),t._v(" ④、总线锁定")]),t._v(" "),s("p",[t._v("总线锁定是一种通过锁定系统总线来确保内存操作原子性的技术。当一个处理器执行一个涉及总线锁定的操作时，其他处理器无法访问内存。这种方法效率较低，因为它会阻止其他处理器的全部访问内存的操作。\n总线锁定通常用于需要高度同步的场合，例如在执行复杂的内存事务或硬件初始化过程中，但它可能导致显著的性能下降，尤其是在高并发的多处理器系统中。")]),t._v(" "),s("h3",{attrs:{id:"区分jvm实现的内存屏障方法和cpu的内存屏障指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#区分jvm实现的内存屏障方法和cpu的内存屏障指令"}},[t._v("#")]),t._v(" 区分JVM实现的内存屏障方法和CPU的内存屏障指令")]),t._v(" "),s("p",[t._v("我们需要先明确一点，无论使用什么编译型的编程语言，最终所有的代码都是在处理器(CPU)上运行的，并且需要经过以下步骤：")]),t._v(" "),s("p",[t._v("1.源代码 -> 2. 编译 -> 3. 汇编代码 -> 4. 二进制机器码 -> 5. 处理器执行\n每一步都是将代码转换为更接近处理器能够直接理解和执行的形式，最终实现程序的功能。")]),t._v(" "),s("p",[t._v("JVM内存屏障方法依赖于CPU的内存屏障指令来最终实现底层的内存操作顺序控制和可见性保证。")]),t._v(" "),s("h3",{attrs:{id:"jvm内存屏障方法的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm内存屏障方法的实现"}},[t._v("#")]),t._v(" JVM内存屏障方法的实现")]),t._v(" "),s("p",[t._v("先下载OpenJDK的jdk8u版本的  hotspot vm 源码看一下：\n(亲自去找一下JVM对于内存屏障的实现源码，方便下面区分JVM层面和CPU指令层面的内存屏障)"),s("br"),t._v(" "),s("a",{attrs:{href:"https://hg.openjdk.org/jdk8u/jdk8u/hotspot/archive/tip.zip",target:"_blank",rel:"noopener noreferrer"}},[t._v("OpenJDK的jdk8u版本的 hotspot源码下载地址：https://hg.openjdk.org/jdk8u/jdk8u/hotspot/archive/tip.zip"),s("OutboundLink")],1),t._v("\n可以直接使用IDEA打开去查看源码。"),s("br"),t._v("\n我这里为了和自己电脑的CPU架构对应起来，直接去看的windows_x86 的 "),s("code",[t._v("orderAccess_windows_x86.inline.hpp")]),t._v("文件，因为我是用Windows系统运行的上面Java代码。")]),t._v(" "),s("p",[s("strong",[t._v("C++小知识点：")]),s("br"),t._v("\n.hpp 和 .cpp 是C++编程中常见的文件扩展名，它们分别代表了头文件（Header File）和源文件（Source File）。")]),t._v(" "),s("p",[s("strong",[t._v(".hpp")]),t._v("：头文件通常包含类的声明、函数原型、常量和宏定义等。这些文件被其他源文件通过 #include 指令引用，使得在编译时可以访问其中定义的类型和函数。使用头文件可以避免代码重复，并且方便在多个地方共享相同的代码定义。")]),t._v(" "),s("p",[s("strong",[t._v(".cpp")]),t._v("：源文件包含了具体的函数实现和代码逻辑，并可以引入.hpp文件。\n例如：unsafe.cpp 就引入了  "),s("code",[t._v("orderAccess_windows_x86.inline.hpp")])]),t._v(" "),s("img",{attrs:{src:t.$withBase("/images/31-3.png"),alt:"mixureSecure"}}),t._v(" "),s("p",[t._v("我们看下 "),s("code",[t._v("orderAccess_windows_x86.inline.hpp")]),t._v("里面对于内存屏障的实现：")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/images/31-4.png"),alt:"mixureSecure"}}),t._v(" "),s("p",[t._v("可以看到源码中有这么几行：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OrderAccess")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadload")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("acquire")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OrderAccess")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("storestore")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("release")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OrderAccess")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadstore")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("acquire")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OrderAccess")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("storeload")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fence")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("稍微解释下源码的含义：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// acquire() 方法在非 AMD64 平台上插入一个对 esp 的读操作，")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以阻止编译器和 CPU 在其前后的内存读操作之间进行重排序。(具体是怎么防止编译器重排序的还不太清楚)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("acquire")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifndef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("AMD64")])]),t._v("\n        __asm "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            mov eax"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dword ptr "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("esp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 读 esp 的值到 eax，创建一个读屏障。")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// !AMD64")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// release() 方法通过一个C++代码的 volatile 存储操作，确保其前面的写操作")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不会被重排序到其后面。")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("release")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 C++ 的 volatile变量 存储操作提供 release 语义。")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" jint local_dummy "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一个无实际赋值作用的 volatile 变量存储操作，但是尤其独特的其他作用。")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fence() 方法实现了一个全内存屏障，确保在屏障前的所有写操作完成后")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再执行屏障后的读操作。")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fence")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifdef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("AMD64")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对于 AMD64 平台，调用平台特定的内存屏障函数。")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("StubRoutines_fence")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("else")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对于非 AMD64 平台，如果系统是多处理器系统，")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用内联汇编的 lock 指令提供全内存屏障。")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("os"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("is_MP")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            __asm "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                lock add dword ptr "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("esp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 lock 前缀的 add 指令创建一个全内存屏障。")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// AMD64")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数实现解释：")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// acquire() 函数在非 AMD64 平台上使用内联汇编，通过读取 esp 寄存器的值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 到 eax 寄存器，防止编译器和 CPU 对前后的内存读操作进行重排序。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这种方式通常被称为读屏障。")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// release() 函数通过一个C++语言的volatile变量的存储操作，防止编译器和 CPU 对前后的")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 内存写操作进行重排序。这种方式通常被称为写屏障。C++的 volatile 关键字确保了")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编译器不会优化掉这个存储操作，提供了必要的顺序保证。")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fence() 函数通过平台特定的方法提供全内存屏障。在 AMD64 平台上，调用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// StubRoutines_fence() 函数（该函数是平台特定的内存屏障实现，从我打印的汇编指令来看x86-64平台是基于lock前缀指令实现的内存屏障）。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在非 AMD64 平台上，如果系统是多处理器系统（os::is_MP() 返回 true），")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 lock 前缀的 add 指令创建一个全内存屏障，防止 CPU 对前后的内存操作进行重排序。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 全内存屏障确保屏障前的所有存储操作在屏障后的读取操作之前完成。")]),t._v("\n")])])]),s("p",[s("strong",[t._v("内联汇编：")]),t._v("\n内联汇编是一种在高级语言（如C/C++）中直接嵌入汇编代码的技术。")]),t._v(" "),s("p",[s("strong",[t._v("补充知识点 C++ 语言特性：")]),t._v("\n在 C++ 中，也有volatile 关键字，volatile告诉编译器不要对这个变量进行任何优化。"),s("br"),t._v("\n对于 volatile jint local_dummy = 0;，编译器会确保实际生成一条写入指令，将 0 写入 local_dummy。"),s("br"),t._v('\n尽管 local_dummy 变量本身没有实际作用，但通过对它的写操作，可以创建一个 "release" 屏障，防止编译器对前后的内存操作进行重排序。(这涉及到下面要说的有序性原理，现在只讨论可见性，先不展开讨论有序性)')]),t._v(" "),s("h3",{attrs:{id:"铺垫-java语言是编译和解释共存的语言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#铺垫-java语言是编译和解释共存的语言"}},[t._v("#")]),t._v(" 铺垫：Java语言是编译和解释共存的语言")]),t._v(" "),s("p",[t._v("Java语言的执行模型开始时对源代码进行编译(这里是指使用javac进行编译生成与平台无关的.class字节码文件)，然后在运行时通过JVM解释执行字节码。但是，通过JIT(即时编译器Just-In-Time Compiler)的介入，它能够动态地将部分热点字节码转换为机器码(特定平台架构下的汇编程序)并缓存起来，从而获得接近于编译型语言的性能。")]),t._v(" "),s("p",[s("strong",[t._v("javac编译阶段：")]),t._v("\nJava源代码（.java 文件）首先被Java编译器（如 javac）编译成字节码（.class 文件）。字节码是一种中间代码，它不是针对任何特定硬件平台的机器代码，而是为Java虚拟机（JVM）设计的。这一阶段类似于编译型语言，因为代码在运行之前就被转换成了另一种形式，而不是直接解释执行（只不过这里编译后的是字节码面对的是JVM）。")]),t._v(" "),s("p",[s("strong",[t._v("解释阶段：")]),s("br"),t._v("\n生成的字节码随后由JVM加载和执行。早期的JVM完全以解释方式执行字节码，即逐条读取字节码指令并立即执行。这种方式类似于解释型语言，因为它不需要在执行前生成最终的机器代码。")]),t._v(" "),s("p",[s("strong",[t._v("即时编译（JIT）：")]),t._v("\n随着时间的推移，JVM引入了一项重要技术——即时编译器（Just-In-Time Compiler）。JIT编译器监控程序运行，并识别出那些频繁执行的“热点”代码段。当检测到热点代码时，JIT编译器会将相应的字节码编译成本地机器代码(上面的例子就是编译成了x86-64平台架构的汇编代码)，这大大提高了执行效率。编译后的代码被缓存，以便在后续调用中直接使用，避免了重复编译。这种方式结合了编译型语言的性能优势，因为代码在运行时被优化和转换为高效的机器码(汇编)。")]),t._v(" "),s("h3",{attrs:{id:"搞清楚内存屏障-memory-barriers-这个概念的双层含义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#搞清楚内存屏障-memory-barriers-这个概念的双层含义"}},[t._v("#")]),t._v(" 搞清楚内存屏障(Memory Barriers)这个概念的双层含义")]),t._v(" "),s("p",[t._v("通过上面的铺垫再继续分析，内存屏障(Memory Barriers)。")]),t._v(" "),s("p",[s("strong",[t._v("第一层：编译器层面")]),t._v("\n在编译阶段，编译器(对于Java来说，例如：JIT编译器)会尝试优化代码，这可能包括重新安排指令的顺序以便更高效地利用处理器资源。然而，某些操作的顺序对于程序的正确运行至关重要，特别是当涉及到多线程或多处理器环境下的共享内存访问时。")]),t._v(" "),s("p",[t._v("所以我们讨论的内存屏障第一层含义有编译器屏障的意思。\n编译屏障（Compiler Barrier） 是一种指示给编译器的指令，告诉它不要在屏障之前的指令与之后的指令之间进行任何优化或重排序。这样可以确保编译器生成的汇编代码保持程序员期望的执行顺序，从而维护内存操作的顺序性。")]),t._v(" "),s("p",[s("strong",[t._v("第二层：CPU执行指令层面")]),t._v("\n在硬件层面上，CPU为了提高效率，可能会采用乱序执行。这意味着处理器可能不会按照指令的原始顺序执行它们，而是基于资源可用性、依赖性分析等策略来动态调整执行顺序。此外，处理器还有可能使用缓存来进一步优化内存访问。")]),t._v(" "),s("p",[t._v("所以内存屏障第二层含义有硬件内存屏障。"),s("br"),t._v("\n硬件内存屏障或者叫内存栅栏（Memory Fence）或者叫CPU屏障(随便你怎么叫，只要理解这是CPU硬件层面的屏障即可)，  是CPU提供的一种特殊指令(上面第二点"),s("code",[t._v("②、CPU内存屏障指令")]),t._v(" 有介绍)，它强制处理器在执行屏障后的指令前完成所有屏障前的内存操作。这确保了指令之间的内存访问顺序，并且使得所有处理器核心能够看到一致的内存状态(通过MESI协议和Snoopying机制,下面会介绍)，这对于维持并发程序的正确性非常关键。")]),t._v(" "),s("h3",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结：")]),t._v(" "),s("p",[t._v("经过上面那么多的铺垫，我们再来总结下，整体思路就非常清晰了。")]),t._v(" "),s("p",[t._v("JVM中通过下面这四个函数"),s("code",[t._v("loadload() 、storestore()、loadstore()、storeload()")]),t._v(" 来实现编译器屏障和 CPU指令(硬件)屏障")]),t._v(" "),s("h3",{attrs:{id:"jvm内存屏障方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm内存屏障方法"}},[t._v("#")]),t._v(" JVM内存屏障方法")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("函数")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("作用")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("备注")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("loadload()")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("确保后续的读操作不会被重排序到前面的读操作之前")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("调用 "),s("code",[t._v("acquire()")]),t._v(" 实现")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("storestore()")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("确保后续的写操作不会被重排序到前面的写操作之前")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("调用 "),s("code",[t._v("release()")]),t._v(" 实现")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("loadstore()")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("确保后续的写操作不会被重排序到前面的读操作之前")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("调用 "),s("code",[t._v("acquire()")]),t._v(" 实现")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("storeload()")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("确保后续的读操作不会被重排序到前面的写操作之前，并保证内存屏障")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("调用 "),s("code",[t._v("fence()")]),t._v(" 实现")])])])]),t._v(" "),s("p",[t._v("我们暂时不讨论有序性。 对于可见性主要看上面对于 "),s("code",[t._v("storeload()")]),t._v("源码的分析。")]),t._v(" "),s("h3",{attrs:{id:"cpu内存屏障指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cpu内存屏障指令"}},[t._v("#")]),t._v(" CPU内存屏障指令")]),t._v(" "),s("p",[t._v("上面已经介绍过了，这里拿过来方便阅读："),s("br"),t._v("\n先理解下Store和Load，可以把Store认为是保存或者写的含义，把Load认为是加载或者读的含义。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("内存屏障类型名称")]),t._v(" "),s("th",[t._v("指令名称")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("描述")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("示例")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("读屏障")]),t._v(" "),s("td",[s("code",[t._v("lfence")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Load Fence，防止读操作的重排序。确保在它之后的所有读操作都在它之前的读操作完成后执行。")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("读敏感数据前确保所有先前的读操作已完成。")])]),t._v(" "),s("tr",[s("td",[t._v("写屏障")]),t._v(" "),s("td",[s("code",[t._v("sfence")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Store Fence，防止写操作的重排序。确保在它之后的所有写入数据后确保所有先前的写操作已完成。")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("所有先前的写操作都已在它之前完成。")])]),t._v(" "),s("tr",[s("td",[t._v("全屏障")]),t._v(" "),s("td",[s("code",[t._v("mfence")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Memory Fence，防止读/写的重排序。确保在它之后的所有读/写操作都在它之前的读/写操作完成后执行。")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("确保所有内存在它之前的操作顺序。")])])])]),t._v(" "),s("p",[t._v("实现CPU内存屏障指令的效果还有一个特殊的方式，那就是 前面提到的 "),s("code",[t._v("lock")]),t._v(" 前缀指令。")]),t._v(" "),s("p",[t._v("JVM的4个内存屏障方法"),s("code",[t._v("loadload() 、storestore()、loadstore()、storeload()")]),t._v(" , 并不是单独作用于编译器的指令确保编译器生成的代码保持程序员期望的执行顺序。这四个方法同样能够确保硬件层面上CPU指令之间的内存访问顺序。(这几个方法如何确保编译器有序性的底层机制还是不太清楚，可能需要再研究研究JIT编译器的细节，这里就不细说了，因为我不太了解JIT)")]),t._v(" "),s("p",[t._v("在上面知识铺垫的过程中，通过查看汇编代码和JVM的源码发现 JVM在处理 "),s("code",[t._v("volatile")]),t._v(" 关键字的多线程写，最终生成的汇编代码是通过 "),s("code",[t._v("lock")]),t._v("前缀指令来实现的。\n对应JVM源码 中"),s("code",[t._v("storeload()")]),t._v("方法 ,对应的汇编代码指令 "),s("code",[t._v("lock addl $0x0,(%rsp)")]),t._v(" 。")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("lock addl $0x0,(%rsp)")]),t._v("指令的作用：")]),s("br"),t._v("\n这条指令在 x86-64 架构的处理器中，虽然从表面上看，addl $0x0, (%rsp)只是将0加到%rsp指向的内存位置，并不会改变内存中的值，但由于addl操作涉及写入内存，所以这个操作仍然会触发内存访问和缓存一致性操作。 同时 lock 前缀确保了在多处理器系统中，当一个处理器正在执行这个指令时，其他处理器不能访问被锁定的内存位置(最小粒度锁的是缓存行)，从而保证了操作的原子性。"),s("br"),t._v("\n并且CPU还会利用缓存一致性协议和Snoopying(嗅探)机制来实现缓存数据的一致性。")]),t._v(" "),s("p",[s("strong",[t._v("这种"),s("code",[t._v("lock")]),t._v("前缀指令用法常见于以下几种场景：")]),t._v("\n内存屏障（Memory Barrier）：确保在此指令之前的所有内存读写操作在所有处理器看来已经完成。相当于一个全局的内存屏障。（涉及有序性后面再说）"),s("br"),t._v("\n刷新缓存：迫使处理器刷新其缓存，确保其他处理器看到最新的数据。(就是现在说的可见性)"),s("br"),t._v("\n实现锁机制：在一些低级别的同步原语实现中，用于确保内存访问的原子性。（涉及到原子性后面再说）")]),t._v(" "),s("p",[t._v("那为什么不用 "),s("code",[t._v("lfence、sfence、mfence")]),t._v("指令呢？"),s("br"),t._v("\n想一想，可能是因为 "),s("code",[t._v("lock")]),t._v(" 前缀指令在提供必要的内存屏障（防止重排序）和实现缓存一致性方面(可见性)具有一些独特的优势。（经典废话文学。。。哈哈）")]),t._v(" "),s("h3",{attrs:{id:"lock-前缀指令的优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lock-前缀指令的优势"}},[t._v("#")]),t._v(" lock 前缀指令的优势")]),t._v(" "),s("p",[s("code",[t._v("lock")]),t._v("前缀不是一种内存屏障，但它能完成类似内存屏障的功能。")]),t._v(" "),s("p",[s("strong",[t._v("统一的全内存屏障：")]),s("br"),t._v("\nlock 前缀指令提供了一个统一的全内存屏障，既可以防止读操作和写操作的重排序，又能确保缓存一致性。\n例如，"),s("code",[t._v("lock add dword ptr [esp], 0")]),t._v(" 既会阻止指令重排序，又会确保所有处理器缓存中对于相应内存位置的修改是可见的。")]),t._v(" "),s("p",[s("strong",[t._v("缓存一致性：")]),s("br"),t._v(" "),s("code",[t._v("lock")]),t._v(" 前缀指令通过使用"),s("strong",[t._v("总线锁定")]),t._v("或"),s("strong",[t._v("缓存锁定")]),t._v("来确保在多处理器系统中缓存的一致性。这点需要再展开讲一下。")]),t._v(" "),s("p",[s("strong",[t._v("总线锁定")]),t._v("： 在比较老的处理器中，或者当内存区域不在缓存中时，"),s("code",[t._v("lock")]),t._v(" 前缀会触发总线锁定。此时，处理器通过拉起其 #LOCK 引脚电位来锁定总线，确保在指令执行期间其他处理器无法访问这段内存。但是这种方式会导致其他处理器(其他的CPU内核)无法访问内存，总线利用率低，影响系统性能。")]),t._v(" "),s("p",[s("strong",[t._v("缓存锁定")]),t._v("：从 P6 架构（P6  是英特尔于1995年推出的一种处理器架构，首个使用该架构的处理器是 Pentium Pro）开始，如果指令访问的内存区域已经存在于处理器的内部缓存(CPU Cache)中，则 lock 前缀不会引起总线锁定，而是锁定本处理器的内部缓存。缓存一致性协议（如 MESI 协议）会确保其他处理器的缓存中相应的缓存行失效（invalidate），从而保持缓存一致性。")]),t._v(" "),s("p",[t._v("在现代 x86或者x86-64 架构处理器中，如 Intel Core 系列和 AMD Ryzen 系列，"),s("code",[t._v("lock")]),t._v(" 前缀指令的实现如下：\n"),s("strong",[t._v("Intel Core 系列：")]),s("br"),t._v("\n在 Core 微架构（如 Nehalem、Sandy Bridge、Skylake 等）中，lock 前缀指令通过锁定缓存行（仅锁定缓存行那一小块内存区域）并利用缓存一致性协议（如 MESI）来确保原子操作。\n"),s("strong",[t._v("AMD Ryzen 系列：")]),s("br"),t._v("\n在 AMD 的 Zen 微架构中，lock 前缀指令也主要通过锁定缓存行来实现，利用缓存一致性协议（如 MOESI）来确保数据的一致性和原子性。")]),t._v(" "),s("p",[t._v("关于CPU缓存锁定后的内存一致性实现机制再简单解释下："),s("br"),t._v("\nSnoopying（嗅探机制）：\nSnoopying 是一种基于总线的缓存一致性维护机制，其中每个处理器的缓存控制器snoop（监视）总线上发生的内存操作，以确保缓存一致性。"),s("br"),t._v("\n每个处理器的缓存控制器会监视总线上的内存请求。如果一个处理器请求访问一个内存地址，其他处理器的缓存控制器会检查其缓存是否包含该地址的最新副本，并作出相应的响应。")]),t._v(" "),s("p",[t._v("Snoopying 和 MESI 一起工作：在多处理器系统中，Snoopying 机制负责监视总线上所有的内存操作。当某个处理器发出读或写请求时，其他处理器会检测到这个请求并作出响应。MESI 协议则通过定义缓存行的四种状态（修改，独占，共享，无效），管理这些响应如何进行，确保缓存行的状态转换符合一致性要求。")]),t._v(" "),s("p",[t._v("举个栗子："),s("br"),t._v("\n画个动画演示下比较好理解")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/images/31-5.gif"),alt:"mixureSecure"}}),t._v(" "),s("p",[t._v("最后的状态再截个图吧，防止太快了需要眨眼补帧")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/images/31-6.png"),alt:"mixureSecure"}}),t._v(" "),s("p",[t._v("对于另外三个CPU内存屏障指令"),s("code",[t._v("lfence、sfence、mfence")]),t._v(" 。我觉得都不如 "),s("code",[t._v("lock")]),t._v("前缀指令来的直接,并且现代处理器会利用缓存锁定的模式来提升性能。同时缓存锁定不仅仅是保证了可见性。(目前一直在讨论的可见性)\n缓存一致性机制会阻止同时修改由两个以上处理器缓存的内存区域数据，所以也能够保证对锁定内存区域修改的原子性。(原子性最后再说)\n"),s("code",[t._v("lock")]),t._v("前缀指令还提供了一个统一的全内存屏障，可以防止读操作和写操作的重排序。(有序性下面再说)"),s("br"),t._v("\n所以"),s("code",[t._v("lock")]),t._v('前缀指令等于是个"全能型选手"。')]),t._v(" "),s("h3",{attrs:{id:"最后再整体总结下volatile保证可见性的底层实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最后再整体总结下volatile保证可见性的底层实现"}},[t._v("#")]),t._v(" 最后再整体总结下"),s("code",[t._v("volatile")]),t._v("保证可见性的底层实现")]),t._v(" "),s("p",[t._v("当一个变量被"),s("code",[t._v("volatile")]),t._v("关键字修饰时，JVM会在适当的位置插入内存屏障指令(通过"),s("code",[t._v("loadload() 、storestore()、loadstore()、storeload()")]),t._v(" 方法)，并依赖于特定的处理器指令("),s("code",[t._v("lock")]),t._v("前缀指令)和处理器的缓存一致性协议来保证可见性。")]),t._v(" "),s("p",[t._v("具体流程如下："),s("br"),t._v(" "),s("strong",[t._v("写 volatile 变量：")]),s("br"),t._v("\nJVM插入"),s("code",[t._v("storeload()")]),t._v("屏障 (这里不讨论有序性)，"),s("code",[t._v("storeload()")]),t._v("会调用 "),s("code",[t._v("fence()")]),t._v(" 向最终生成的汇编代码中插入"),s("br"),t._v(" "),s("code",[t._v("lock addl $0x0,(%rsp)")]),t._v(" 指令，这个指令保证volatile 变量的最新值被刷新到主内存。")]),t._v(" "),s("p",[s("strong",[t._v("更新 volatile 变量：")]),s("br"),t._v("\n缓存一致性协议和Snoopying机制使得其他CPU核心的缓存中相应的缓存行无效 。")]),t._v(" "),s("p",[s("strong",[t._v("读 volatile 变量：")]),s("br"),t._v("\n缓存一致性协议确保任何后续的读操作或更新操作，获取缓存中相应的缓存行无效时都从主内存中获取最新的值。")]),t._v(" "),s("h2",{attrs:{id:"_3、volatile-关键字保证有序性的原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、volatile-关键字保证有序性的原理"}},[t._v("#")]),t._v(" 3、volatile 关键字保证有序性的原理")]),t._v(" "),s("p",[t._v("一定要把上面的知识点都看了，再来看这个。因为前面有大量的铺垫帮助理解。")]),t._v(" "),s("h3",{attrs:{id:"volatile-关键字保证有序性的两个方面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#volatile-关键字保证有序性的两个方面"}},[t._v("#")]),t._v(" volatile 关键字保证有序性的两个方面")]),t._v(" "),s("p",[t._v("①、保证编译器生成的汇编代码的有序性"),s("br"),t._v("\n编译器在生成汇编代码时，通常会进行各种优化，包括生成汇编代码的时候把指令序列重排，以提高执行效率。然而，这些优化在多线程环境中可能会导致数据不一致性。volatile关键字通过告诉编译器，对volatile变量的访问不能被优化或重排，让编译器生成程序员期望的有序代码，从而保证访问的顺序性。")]),t._v(" "),s("p",[t._v("②、保证CPU执行指令的有序性\n即使编译器生成了有序的汇编代码，CPU在执行这些指令时也可能进行重排，以优化执行效率。volatile关键字在一定程度上通过内存屏障来保证CPU执行指令的有序性。")]),t._v(" "),s("h3",{attrs:{id:"先看编译器重排序规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#先看编译器重排序规则"}},[t._v("#")]),t._v(" 先看编译器重排序规则")]),t._v(" "),s("p",[t._v("JMM针对编译器制定的volatile重排序规则：\n下面表格内容来源于书籍：《并发编程的艺术》"),s("br"),t._v("\n这里重新制作了一下。"),s("br"),t._v(" "),s("img",{attrs:{src:t.$withBase("/images/31-7.png"),alt:"mixureSecure"}})]),t._v(" "),s("p",[t._v("JMM针对编译器制定的volatile重排序规则约束还是挺多的  只有第一个操作是普通读写，第二个操作也是普通读写。"),s("br"),t._v("\n第一个操作是普通读写，第二个操作是volatile读。这两种情况才允许编译器重排序这两个操作。"),s("br"),t._v("\n不过要明确，这两种情况也不是一定就会被编译器重排序。")]),t._v(" "),s("p",[t._v("在上一篇文章"),s("a",{attrs:{href:"https://deepjava.blog.csdn.net/article/details/140087696",target:"_blank",rel:"noopener noreferrer"}},[t._v("JMM(Java内存模型)详解"),s("OutboundLink")],1),t._v("中有说过什么情况下可能发生重排序。")]),t._v(" "),s("p",[t._v("JMM内存屏障插入策略，这就能接上上面提到的 "),s("code",[t._v("JVM内存屏障方法的实现")]),t._v("了。")]),t._v(" "),s("p",[t._v("在每个volatile写操作的前面插入一个StoreStore屏障，对应JVM源码中的"),s("code",[t._v("storestore()")]),t._v("方法。"),s("br"),t._v("\n在每个volatile写操作的后面插入一个StoreLoad屏障，对应JVM源码中的"),s("code",[t._v("storeload()")]),t._v("方法。"),s("br"),t._v("\n在每个volatile读操作的后面插入一个LoadLoad屏障，对应JVM源码中的"),s("code",[t._v("loadload()")]),t._v("方法。"),s("br"),t._v("\n在每个volatile读操作的后面插入一个LoadStore屏障，对应JVM源码中的"),s("code",[t._v("loadstore()")]),t._v("方法。")]),t._v(" "),s("p",[t._v("把上面内容再拿下来一份：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("函数")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("作用")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("备注")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("loadload()")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("确保后续的读操作不会被重排序到前面的读操作之前")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("调用 "),s("code",[t._v("acquire()")]),t._v(" 实现")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("storestore()")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("确保后续的写操作不会被重排序到前面的写操作之前")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("调用 "),s("code",[t._v("release()")]),t._v(" 实现")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("loadstore()")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("确保后续的写操作不会被重排序到前面的读操作之前")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("调用 "),s("code",[t._v("acquire()")]),t._v(" 实现")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("storeload()")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("确保后续的读操作不会被重排序到前面的写操作之前，并保证内存屏障")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("调用 "),s("code",[t._v("fence()")]),t._v(" 实现")])])])]),t._v(" "),s("p",[t._v("上述内存屏障插入策略可以保证在任意的Java程序和任意的处理器平台都能得到正确的volatile作用。")]),t._v(" "),s("p",[t._v("下面是插入内存屏障后生成的指令序列示意图：\n原图内容来源于书籍：《并发编程的艺术》"),s("br"),t._v("\n这里只是重做了一下图片。")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/images/31-8.png"),alt:"mixureSecure"}}),t._v(" "),s("p",[t._v("实际上编译器可以根据具体情况省略不必要的屏障但是前提是必须保证JMM对于volatile关键字作用的定义。")]),t._v(" "),s("p",[t._v("比如出现连续两个volatile写，那么编译器在生成汇编代码时，只会在第一个volatile写下面插入StoreStore屏障,在第二个volatile写后面插入StoreLoad屏障,这样能够保证JMM对于volatile关键字作用的定义，并且能够最小化插入屏障的数量来提高性能。")]),t._v(" "),s("h3",{attrs:{id:"x86架构处理器的指令重排序规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#x86架构处理器的指令重排序规则"}},[t._v("#")]),t._v(" x86架构处理器的指令重排序规则")]),t._v(" "),s("p",[t._v("x86处理器（这里包含了x86/x86-64）,JVM源码注释中x86-64使用的名称是AMD64实际上就是x86-64, 仅会对写-读操作做重排序。x86不会对读-读、读-写和写-写操作做重排序。"),s("br"),t._v("\n所以JVM在实现"),s("code",[t._v("loadload() 、storestore()、loadstore()、storeload()")]),t._v(" 方法时会针对特定处理器架构有不同的处理。"),s("br"),t._v("\n这里再把上面的JVM   "),s("code",[t._v("orderAccess_windows_x86.inline.hpp")]),t._v("文件的部分源码拿下来：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OrderAccess")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadload")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("acquire")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OrderAccess")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("storestore")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("release")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OrderAccess")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadstore")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("acquire")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OrderAccess")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("storeload")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fence")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("稍微解释下源码的含义：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// acquire() 方法在非 AMD64 平台上插入一个对 esp 的读操作，")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以阻止编译器和 CPU 在其前后的内存读操作之间进行重排序。")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("acquire")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifndef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("AMD64")])]),t._v("\n        __asm "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            mov eax"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dword ptr "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("esp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 读 esp 的值到 eax，创建一个读屏障。")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// !AMD64")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// release() 方法通过一个C++代码的 volatile 存储操作，确保其前面的写操作")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不会被重排序到其后面。")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("release")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 volatile 存储操作提供 release 语义。")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" jint local_dummy "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一个无实际赋值作用的 volatile 变量存储操作。")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fence() 方法实现了一个全内存屏障，确保在屏障前的所有写操作完成后")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再执行屏障后的读操作。")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fence")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifdef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("AMD64")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对于 AMD64 平台，调用平台特定的内存屏障函数。")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("StubRoutines_fence")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("else")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对于非 AMD64 平台，如果系统是多处理器系统，")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用内联汇编的 lock 指令提供全内存屏障。")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("os"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("is_MP")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            __asm "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                lock add dword ptr "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("esp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 lock 前缀的 add 指令创建一个全内存屏障。")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// AMD64")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数实现解释：")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// acquire() 函数在非 AMD64 平台上使用内联汇编，通过读取 esp 寄存器的值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 到 eax 寄存器，防止编译器和 CPU 对前后的内存读操作进行重排序。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这种方式通常被称为读屏障。")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// release() 函数通过一个C++语言的volatile变量的存储操作，防止编译器和 CPU 对前后的")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 内存写操作进行重排序。这种方式通常被称为写屏障。C++的 volatile 关键字确保了")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编译器不会优化掉这个存储操作，提供了必要的顺序保证。")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fence() 函数通过平台特定的方法提供全内存屏障。在 AMD64 平台上，调用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// StubRoutines_fence() 函数（该函数是平台特定的内存屏障实现）。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在非 AMD64 平台上，如果系统是多处理器系统（os::is_MP() 返回 true），")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 lock 前缀的 add 指令创建一个全内存屏障，防止 CPU 对前后的内存操作进行重排序。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 全内存屏障确保屏障前的所有存储操作在屏障后的读取操作之前完成。")]),t._v("\n")])])]),s("p",[t._v("可以看到，"),s("code",[t._v("loadload()和loadstore()")]),t._v("调用的是"),s("code",[t._v("acquire()")]),t._v("方法，这个方法中在ADM64平台并没做任何操作。"),s("br"),t._v("\n因为ADM64(x86-64)处理器平台的 "),s("code",[t._v("读-读、读-写")]),t._v("在处理器执行指令时并不会重排序。")]),t._v(" "),s("p",[t._v("处理器的重排序规则(N：表示处理器不允许两个操作重排序   Y: 表示允许两个操作重排序)\n表格内容来源于书籍《并发编程的艺术》"),s("br"),t._v("\n这里重新做了一下表格样式。")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/images/31-9.png"),alt:"mixureSecure"}}),t._v(" "),s("p",[t._v("补充知识点："),s("br"),t._v(" "),s("strong",[t._v("编译器屏障：")]),s("br"),t._v('\n在 C/C++ 中，常见的编译器屏障是 asm volatile ("" ::: "memory")。这个指令告诉编译器不要对内存操作进行重排序，它不会生成实际的机器指令，但会影响编译器的优化过程。'),s("br"),t._v("\nJava 中则没有直接的编译器屏障语法，但是JVM中的"),s("code",[t._v("release()")]),t._v("方法，利用C++语言的volatile变量的存储操作"),s("code",[t._v("volatile jint local_dummy = 0;")]),t._v("，防止编译器和 CPU 对前后的内存写操作进行重排序。(具体是怎么防止编译器重排序的不太清楚，没去深入研究过JIT编译器)")]),t._v(" "),s("h3",{attrs:{id:"总结下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结下"}},[t._v("#")]),t._v(" 总结下：")]),t._v(" "),s("p",[t._v("volatile 关键字保证有序性的原理："),s("br"),t._v("\nJVM通过JMM（Java内存模型）规范定义volatile关键字保证有序性，主要是通过内存屏障机制(包括编译器屏障，CPU指令屏障)来确保编译器生成的汇编代码保持程序员期望的执行顺序，并且确保处理器(CPU)按照顺序执行指令。")]),t._v(" "),s("h2",{attrs:{id:"_4、volatile无法保证原子性吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、volatile无法保证原子性吗"}},[t._v("#")]),t._v(" 4、volatile无法保证原子性吗？")]),t._v(" "),s("h3",{attrs:{id:"先说结论"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#先说结论"}},[t._v("#")]),t._v(" 先说结论：")]),t._v(" "),s("p",[t._v("对任意单个volatile变量的读/写具有原子性，类似于"),s("code",[t._v("count++")]),t._v("这种复合操作不具有原子性。")]),t._v(" "),s("p",[t._v("具体分析：\n对任意单个volatile变量的读/写具有原子性："),s("br"),t._v("\n例如：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 单个volatile 读")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 单个volatile变量的写")]),t._v("\n")])])]),s("p",[t._v("但是也有例外(64位的long型和double型变量):")]),t._v(" "),s("h3",{attrs:{id:"知识铺垫-总线事务-这部分内容来源于书籍《并发编程的艺术》"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#知识铺垫-总线事务-这部分内容来源于书籍《并发编程的艺术》"}},[t._v("#")]),t._v(" 知识铺垫：总线事务  (这部分内容来源于书籍《并发编程的艺术》)")]),t._v(" "),s("p",[t._v("在计算机中，数据通过总线在处理器和内存之间传递。每次处理器和内存之间的数据传递都是通过一系列步骤来完成的，这一系列步骤称之为总线事务（Bus Transaction）。总线事务包括读事务（Read Transaction）和写事务（WriteTransaction）。读事务从内存传送数据到处理器，写事务从处理器传送数据到内存，每个事务会读/写内存中一个或多个物理上连续的字。这里的关键是，总线会同步试图并发使用总线的事务。在一个处理器执行总线事务期间，总线会禁止其他的处理器和I/O设备执行内存的读/写。")]),t._v(" "),s("p",[s("strong",[t._v("JMM不保证对64位的long型和double型变量的写操作具有原子性。")]),s("br"),t._v("\n在一些32位的处理器上，如果要求对64位数据的写操作具有原子性，会有比较大的开销。为了照顾这种处理器，Java语言规范鼓励但不强求JVM对64位的long型变量和double型变量的写操作具有原子性。当JVM在这种处理器上运行时，可能会把一个64位long/double型变量的写操作拆分为两个32位的写操作来执行。这两个32位的写操作可能会被分配到不同的总线事务中执行，此时对这个64位变量的写操作将不具有原子性。")]),t._v(" "),s("p",[t._v("在JSR-133之前的旧内存模型中，一个64位long/double型变量的读/写操作可以被拆分为两个32位的读/写操作来执行。从JSR-133内存模型开始（即从JDK5开始），仅仅只允许把一个64位long/double型变量的写操作拆分为两个32位的写操作来执行，任意的读操作在JSR133中都必须具有原子性（即任意读操作必须要在单个读事务中执行）。通过确保读操作的原子性，JSR-133 保证了一个线程在读取 long 或 double变量时，要么看到的是完全的旧值，要么看到的是完全的新值，而不是混合的中间状态。")]),t._v(" "),s("p",[t._v("目前大部分商用JVM会把 64 位数据的读写操作作为原子操作来对待，这样即使我们共享long/double型变量，也不用加volatile关键字了。")]),t._v(" "),s("h3",{attrs:{id:"类似于count-这种复合操作不具有原子性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类似于count-这种复合操作不具有原子性"}},[t._v("#")]),t._v(" 类似于"),s("code",[t._v("count++")]),t._v("这种复合操作不具有原子性")]),t._v(" "),s("p",[t._v("主要是因为count++是复合操作包括以下步骤：")]),t._v(" "),s("ul",[s("li",[t._v("读取count的值。")]),t._v(" "),s("li",[t._v("对count加1。")]),t._v(" "),s("li",[t._v("将count值写回内存。"),s("br"),t._v("\n实际上已经包含了读写操作。")])]),t._v(" "),s("p",[t._v("代码示例：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token import"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("concurrent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CountDownLatch")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TestA")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CountDownLatch")]),t._v(" startSignal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CountDownLatch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                startSignal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("await")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                startSignal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("await")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        t1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        t2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 让t1，t2 同时开始")]),t._v("\n        startSignal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("countDown")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        t1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        t2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("实际上IDEA也会提示，对volatile变量进行了非原子操作。")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/images/31-10.png"),alt:"mixureSecure"}}),t._v(" "),s("p",[t._v("结果：   期望得到20000这个结果，但是实际上很难得到20000这个结果。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12435")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("也可能是其他大于0且小于等于20000的整数"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"_5、volatile怎么用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、volatile怎么用"}},[t._v("#")]),t._v(" 5、volatile怎么用")]),t._v(" "),s("h3",{attrs:{id:"推荐用volatile的一种情况-纸上谈兵的时候"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#推荐用volatile的一种情况-纸上谈兵的时候"}},[t._v("#")]),t._v(" 推荐用volatile的一种情况（纸上谈兵的时候）")]),t._v(" "),s("p",[t._v("就是如果你找工作面试的时候，有面试官问如何实现线程安全的单例模式。"),s("br"),t._v("\n那么这种情况下你可以利用volatile关键字和双检锁来实现，或者用静态内部类实现。")]),t._v(" "),s("p",[s("strong",[t._v("利用volatile关键字和双检锁代码如下：")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TestA")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 验证是否单例")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// volatile声明变量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造函数私有化")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 双检锁")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("利用静态内部类实现：")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//声明为 private 避免调用默认构造方法创建对象")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明为 private 表明静态内部该类只能在该 Singleton 类中被访问")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonHolder")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("INSTANCE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonHolder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("INSTANCE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"生产不太推荐使用volatile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生产不太推荐使用volatile"}},[t._v("#")]),t._v(" 生产不太推荐使用volatile")]),t._v(" "),s("p",[t._v("为什么不太推荐在生产环境使用volatile来实现并发安全的程序呢，主要还是容易出错。 以空间换时间或者时间换空间这类优化是常见的，但是不会有系统能够容忍以正确性换性能的情况。所以当你没有十足的把握掌握volatile 的正确使用时，保证并发安全，还是建议使用JDK提供的其他方式，比如锁或者原子类。")]),t._v(" "),s("ul",[s("li",[t._v("①、volatile仅保证最低限度的原子操作。如果想保证原子性又不想显式加锁可以尝试使用原子类。大部分需要同步的并发操作还是推荐synchronized 、或者Lock锁，在JDK5及之后 synchronized 关键字已经被充分优化，JUC并发包中也使用了synchronized ，所以不用怀疑其性能(后面会详细介绍synchronized )。")]),t._v(" "),s("li",[t._v("②、使用volatile对技术要求太高，使用不当很可能会导致程序出bug。")])]),t._v(" "),s("h3",{attrs:{id:"心得"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#心得"}},[t._v("#")]),t._v(" 心得：")]),t._v(" "),s("p",[t._v("写完这篇文章，断断续续花了大概一周时间。"),s("br"),t._v("\n参考了很多资料，尤其是《并发编程的艺术》、《JAVA并发编程实战》这两本书，也使用了各种AI工具，最好用的还是ChatGPT4o,只不过免费版每天的提问次数有限。\n还参考了一些博客下面附上部分参考的博客链接："),s("br"),t._v("\nhttps://javaguide.cn/java/concurrent/jmm.html"),s("br"),t._v("\nhttps://pdai.tech/md/java/thread/java-thread-x-key-volatile.html"),s("br"),t._v("\nhttps://javabetter.cn/thread/volatile.html")]),t._v(" "),s("p",[t._v("再回头去看写的这篇文章，有点感觉这不就是东拼西凑出来的东西吗？"),s("br"),t._v("\n很多内容理解的还是比较模糊，比如JVM中关于编译器屏障的一些细节，这个点我还是比较模糊的。 再比如JIT编译的 x86-64架构下的汇编代码，到底哪一条确定的指令对应着volatile变量的修改，我尝试把volatile变量修改成特殊的数字然后尝试找到具体对应的一条指令，但是没找到，我把特殊的数字转成16进制去搜索打印的汇编代码日志，也没搜到。 还有一些似懂非懂模糊不清的原理或者概念等问题。"),s("br"),t._v("\n但是呢，我觉得本来打算写这个 《构建自己的Java知识体系》 一系列文章的目的，本质上是为了梳理、巩固、拓展自己的Java知识体系，很多文章虽然看起来像是东拼西凑，实际上是有自己的思考和补充理解在里面，同时会按照符合自己阅读习惯的方式来记录。"),s("br"),t._v("\n有时候自认为了解或者已经掌握了某个知识点后，但当自己真正去整理的时候才会发现，自己许多的不足之处。"),s("br"),t._v("\n纸上谈兵终究浅显，实际操作才能深刻理解呀~")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://deepjava-gm.github.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("欢迎访问我的主页：https://deepjava-gm.github.io"),s("OutboundLink")],1),t._v("\n里面有《构建自己的Java知识体系》系列技术博客，以及对开发者非常有用的站点分享。"),s("br"),t._v("\n如果github访问比较慢可以参考这篇文章加速 "),s("a",{attrs:{href:"https://deepjava.blog.csdn.net/article/details/140143860",target:"_blank",rel:"noopener noreferrer"}},[t._v("增加Github访问稳定性"),s("OutboundLink")],1),t._v("。"),s("br"),t._v("\n也欢迎关注我的公众号： DeepJava")])])}),[],!1,null,null,null);s.default=e.exports}}]);